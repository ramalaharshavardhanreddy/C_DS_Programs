Links:- Arm Assembly ---- http://www.coranac.com/tonc/text/asm.htm

/*********** System Organization *********/ 
CPU:- The cpu contains the fallowing main blocks 
            1. Control unit       :- Retrive/ Decode instructions, Retrive / store in memory.
            2. Execution Unit     :- Actual execution of instructions happens here. 
            3. Registers          :- Internal memory locations used as "Variables".
            4. Flags              :- Used to indicate various "event" when execution is happening.
           
CPU Registers:-
            There are 4 types of CPU Registers, 
             1. General Purpose Registers
                    EAX EBX ECX EDX ESI EDI ESP EBP 
             2. Segment Registers 
                    CS DS SS ES FS GS 
             3. Instruction Pointer Register 
                    EIP  
             4. Control Registers 
                    CR0 CR1 CR2 CR3 CR4 

1. General Purpose Registers :- 
        EAX :- Accumulator Register - used to storing operands and result data. 
        EBX :- Base register - Pointer to data. 
        ECX :- Counter register - Loop operations. 
        EDX :- Data Register - i/o Pointer.  
        ESI - EDI :- Data Pointer Registers for memory operations.
        ESP :- Stack Pointer Register, points to top of stack. 
        EBP :- Stack Data Pointer Register.  

Virtual Memory Model:-  
    1.  Every process is laid out in the same virtual memory space - regardless of the 
        actual physical memory location.  
    
    2.  Every process feels that it is in the system alone and enjoys all the memory and 
        that no other processes exist. 

    3.  The OS and CPU together help maintain this abstraction. 
 
IMP:- If you run the same code multiple times, the starting adress of segments are  different 
      every time, this is due to the "randomize_va_space" feature in kernel,
          
             CMD:-  cat /proc/sys/kernel/randomize_va_space 
             
/**************** Structure of an Assembly Program ******************/ 
1. In Assembly Programming, we divided the Entire code into different segments
   .data 
         All Initialized data.
   .bss 
         All Uninitialized data. 
   .text 
                Program instructions.  
       .globl _start  
                    Externally callable routines 
       _start:
              Main() routine   
       
Linux System Calls:-
 
    1. "library" which the kernel exposed to get various tasks done.
    2. List of system calls available in /usr/include/asm/unistd.h 
    3. E.g:- is exit(), read(), write() etc. which you must have used extensively while     
       Programming in c. 
    4. System calls are invoked by processes usig a software interrupt - INT 0x80 

How do we pass arguments to syscall:- 
    
    EAX -- System Call Number 
    EBX -- first argument 
    ECX -- second argument 
    EDX -- third argument   
    ESI -- fourth argument 
    EDI -- fifth argument  

Example of exit() in Assembly:-  
   1. Calling exit(0) to exit a program 
   2. Function defination 
        void _exit(int status); 

        Procedure:-
           1a. Sys call number for exit() is 1, so load EAX with 1 
                movl $1,%eax 

           1b. "status" is lets say "0" -EBX must be loaded with "0"
                movl $0,%ebx 

           1c. Raise the software interrupt 0x80 
                int 0x80 
        
        Sample code for exit:- 
            .text 
                
                .globl_start 

                _start:
                        movl $1,%eax
                        movl $0,%ebx
                        int 0x80 

creation and compilation:-
           1. vim file-name.s 
           2. as -o file-name.o file-name.s   // Assembler 
                        (or)
              as -gstabs -o file-name.o file-name.s  // For enabling gdb symbols 
           3. ld -o file-name file-name.o     // Linker 
           4. ./file-name 

Example of Hello world:-  
      1. We will use the write() syscall to print the "hello world" message. 
      2. Then use exit() to reacefully exit the program.
      3. Write() Syscall description:
            ssize_t write(int fd,const void* buf, size_t count); 
      4. Syscall number for write() is 4 (store in EAX) 
      5. Fd = 1 for STDOUT (store in EBX)
      6. Buf =  pointer to memory location containing "Hello World" string (in ECX)
      7. Count = string length (store in EDX) 
      
/*************** Data Types in .DATA *********************/ 
    .byte = 1 byte
    .ascii = string 
    .asciz = Null terminated string 
    .int = 32 bit integer  
    .short = 16 bit integer 
    .float = Single precision floating point number 
    .double = Double precision floating point number 
   
   IMP :- Space reserved at Compile Time.

/************** Data Types in .BSS ***********************/
    .comm - declares common memory area 
    .lcomm - declares local common area 
        
   IMP :- Space created at Runtime

/************** Basic instructions - MOVx ****************/ 

    1. Mov is probably one of the most frequently used instruction in assembly. 
    2. Usage format: MOVx source, destination 
            -- movl = moves a 32 bit value 
                movl %eax,%ebx 
            -- movw = moves a 16 bit value
                movw %ax,%bx 
            -- movb = moves a 8 bit value 
                movb %ah,%bh 

Moving Data:-
    1. Between Registers: 
          movl %eax, %ebx 
          
    2. Between Registers and Memory:
          location: 
                    .int 10
                    
          movl %eax, location 
          movl location, %ebx 
         
    3. Immediate value into Register:
         movl $10,%ebx 
         
    4. Immediate value into memory location 
            location:
                     .byte 0  
                     
            movb $10, location 
          
    5. Moving Data into an indexed Memory Location 
            IntegerArray:
                .int 10,20,30,40,50 
            
            Selecting the  3rd ineger "30" 
            BaseAdress(offset, index, Size) = 
            IntegerArray(0,2,4) 
            
          ie: movl %eax,IntegerArray(0,2,4)  
          
/**************** Indirect Adressing using Registers *********************/ 

1. Placing the "$" sign before a label name ==> take the memory adress of the variable 
   and not the value. 
   
2. movl $location, %edi 

3. movl $9, (%edi) ==> place value "9" in memory location pointed to by EDI. 

4. movl $9,4(%edi) ==> place value "9" in memory location pointed by (EDI+4). 

5. movl $9, -2(%edi) ==> place value "9" in memory location pointed by (EDI-2). 

/*************** Working with strings in Assembly ***********************/ 

1. Moving String from one memory location to another 
    MOVSx:
            MOVSB - Move a byte (8 bits)
            MOVSW - Move a Word (16 bits)
            MOVSL - Move a double Word (32 bits)
    
    Source - ESI points to memory location
    Destination - EDi points to  memory location 

The DF Flag:-  
    1. Direection Flag (DF) (part of EFLAGS Registers)
    2. Decides wether to increment / decrement ESI,EDI registers after a MOVSx instruction.  
        - If DF is set, ie. "1" ==> ESI,EDI registers are decremented 
        - If DF is cleared, ie. "0" ==> ESI,EDI are incremented 

    3. You can set DF using the STD instruction 
       You can clear DF using the CLD instruction 

REP instruction:- 
    1.  Is used to repeat a string instruction over and over again till the ECX register 
        has a value > 0 . 
        
        Sample use: 
                -- Load the ECX register with the string length  
                -- Use the REP MOVSx instruction to copy the string from source to dest.
                 
Loading Strings from Memory into Registers:-
    1. Loading Strings 
           - Loads into the EAX register 
           - String source pointed to by ESI 

    2. LODSx 
            - LODSB => Load a byte from memory location into AL 
            - LODSW => Load a word from memory into AX 
            - LODSL => Load a double word from memory into EAX 

    3. ESI is automatically incremented / decremented  based on DF flag after the LODSx 
       instruction executes. 
       
   IMP:- leal :- 
            LEA (load effective address) just computes the address of the operand, it does not 
            actually dereference it. Most of the time, it's just doing a calculation like a 
            combined multiply-and-add for, say, array indexing 

Storing Strings from Registers into Memory:- 

    1. Storing Strings  
        -- Stores into memory from EAX 
        -- EDI points to destination memory 
        
    2. STOSx:
            - STOSB => store AL to memory 
            - STOSW => Store AX to memory 
            - STOSL => Store EAX to memory 

   3. EDI is incremented / decremented based on the DF flag after every STOSx instruction is 
      executed. 

Comparing Strings:-  
    
    -- ESI contains Source string, EDI the Destination string 
    -- DF flag decides whether ESI/EDI are incremented / Decremented. 
    
    1. CMPSx:
             - CMPSB => compares byte value 
             - CMPSW => compares word value 
             - CMPSL => compares double word value 
             
    2. CMSPx subtracts the destination string from the source string and sets the 
       EFLAGS register appropriately.  
       
/********************** Program Execution Flow *********/ 
Unconditional Branching:-  
    
    1. JMP:
           1. Compare it with GOTO:statement in C 
           2. Syntax -- JMP Label  
           3. Short  : +- 128 bytes from the curent location in instruction region  
              Near   : between both of them (short & Far)
              Far    : used to jump to different segment    
              
    2. Call:
           1. Just like call function in c 
           2. Syntax - Call location 
           3. There is an associated "RET" statement with every call 
               1. compare it with return statement in c.  
           4. Using "Call" Pushes the next instruction adress onto the stack 
           
Conditional Branching:- 
   
   1. JXX- JA, JAE, JE, JG, JZ, JNZ ... etc  
   2. Dictated by the state of the 
        - Zero flag    (ZF)
        - Parity flag  (PF)
        - Overflow flag(OF)
        - Sign flag    (SF)
        - Carry flag   (CF)
   3. In order to use conditional Jumps you must have an operation which sets the 
      EFLAGS register appropriately
   4. In conditional jumps - only Short and Near jumps are supported. Far jumps 
      are not supported.  
      
LOOP Instruction:- 

    1. Used to loop through a set of instructions a pre determined # of times 
    2. # of times is stored in ECX 
        - LOOP automatically decrements ECX after every run 
    3. Sample usage:
           <code>
                movl $10, %ECX --> 10 is the no of times to loop 
                LoopThis:
                        <code>
                        <code>
                      
Conditional LOOPS:- 

    1. LOOPZ - loop until ECX is not Zero or the zero flag(ZF) is not set. 
    2. LOOPNZ - loop until ECX is not Zero or the zero flag (ZF) is set. 
    
/*************** Functions in Assembly *********/ 

    1. Defining a function in Assembly: 
        .type MyFunction, @function 

        MyFunction:
            <code>
            <code>
            ret 
    2. Function can be invoked usig " call MyFunction"

Passing arguments and returning value:- 

    1. Passing Arguments to function 
        - Registers 
        - Global Memory Locations 
        - Stack 

    2. Returning Value from function 
        - Registers 
        - Global Memory Locations 


