Links :- http://www.yolinux.com/TUTORIALS/GDB-Commands.html




To enable the debug symbols in the executable we can use -ggdb.
    Ex:- gcc <input.c> -ggdb -o <exe-name>
To run the executable with the gdb
    Ex:- gdb ./<Executable-name>

/******************* < 'list' command usage > *************/ 
To print lines from a source file, use the list command (abbreviated l). By default, 
ten lines are printed. There are several ways to specify what part of the file you 
want to print.

Here are the forms of the list command most commonly used:

list linenum
    Print lines centered around line number linenum in the current source file.
list function
    Print lines centered around the beginning of function function.
list
    Print more lines. If the last lines printed were printed with a list command, 
    this prints lines following the last lines printed; however, if the last line 
    printed was a solitary line printed as part of displaying a stack frame.
list -
    Print lines just before the lines last printed.
    By default, GDB prints ten source lines with any of these forms of the list 
    command. You can change this using set listsize:

set listsize count
    Make the list command display count source lines (unless the list argument explicitly 
    specifies some other number).
show listsize
    Display the number of lines that list prints.
    Repeating a list command with RET discards the argument, so it is equivalent to 
    typing just list. This is more useful than listing the same lines again. 
    An exception is made for an argument of `-'; that argument is preserved in 
    repetition so that each repetition moves up in the source file.

In general, the list command expects you to supply zero, one or two linespecs. Linespecs specify source lines; 
there are several ways of writing them, but the effect is always to specify some source line. 
Here is a complete description of the possible arguments for list:

list linespec
    Print lines centered around the line specified by linespec.
list first,last
    Print lines from first to last. Both arguments are linespecs.
list ,last
    Print lines ending with last.
list first,
    Print lines starting with first.
list +
    Print lines just after the lines last printed.
list -
    Print lines just before the lines last printed.

IMPORTENT :- 
    List command is useful only when source code is exists, if you rename the source code and try to run the 
    souce code with gdb, where the list command gives Error.  

/************************** < 'info' command usage > ***********************/ 
To list all the features supported by info , we can use "(gbd) info <ENTER>"
info functions 
    list all the functions, both debug and non debug functions.  
info sources 
   Source files for which symbols will be read in on demand:
info variables 
   It does not print any local variables, It prints global and static variables only.  
info scope <double-tab> 
    List all the available scopes. 
    
-- To Extract only debug symbols from Executable, 
        Ex:- objcopy --only-keep-debug <rip from binary> <output debug file> 

-- To strip the debugging symbols from Executables 
        Ex :  strip --strip-debug <Executable-file>
              strip --strip-debug --strip-unneeded <Executable-file>
                    strip everything which is not required to run the binary. 

Adding Debug Symbols to Binary :-
    2 ways :-
        1. Load the symbol file within GDB 
              - symbol-file file_name
        2. Add it in the Binay itself
              - objcopy --add-gnu-debuglink=debug_symbolfile exeBinaryFile    
         
/***************** Inspecting Symbols with  NM ****************************/

nm :-
     nm displays the symbol table associated with an object, archive library of objects, 
     or executable file. nm recognizes several different file types that may contain symbol tables:
     
         -- object files ending in .obj. These files may be Intel OMF (Object Module Format) files or
            COFF (Common Object File Format) files.
         -- library files, which normally end in .lib and contain one or more OMF or COFF files.
         -- Windows executable files, which normally end in .exe, that contain a symbol table compatible 
            with those produced by PLINK86, the Microsoft Linker, the Watcom Linker, or the Borland Linker.
         -- A symbol table may be created from a .map file (such as those produced by Microsoft link) by using 
            unstrip to create a symbol table compatible with PLINK86.
                     
Note that nm does not list entry points in a DLL, unless there is a symbol table associated with it.  

The output of nm of an executable is given below 
            Ex :- nm ./oput-debug-exe 
                  -Virtual Adress   -Symmbol Type    -Symbol Name  
            ex :-       08049f24           d            SubtractNumbers   

Different symbol types :- 
        1. A      --> Absolute Symbol
        2. B      --> In the uninitialized Data Section (BSS)
        3. D      --> In the initialized Data Section 
        4. N      --> Debugging Symbol 
        5. T      --> In the text section
        6. U      --> Symbol Undefined rightknow 

         output is mix of both lower and upper case symbols, the lower case is local symbols. 
                                                           , the upper case is External Symbols.
 
NM Usage :-
            NM -A ... | grep function_name 
            NM -n .. ( Display in Sorted order)
            NM -g (External Symbols)
            NM -s (Display size)

/************************** System call tracing with strace ******************/ 
1. Helper tool to understand how your program interacts with th os.  
2. Trace all system calls made by the program. 
3. Tells us about arguments passed and has great filtering capabilities. 

Execute a binary using strace :- starce <Exe-File-Name> 

Tracing an Execution:-  
    1. strace exe_to_trace arguments
      "-o" output_file 
      "-t" for timestamp 
      "-r" for relative timestamping 

Trace by Specific Syscall:-
    1. strace -e open,connect,recv exe-to-trace arguments 
           
Attaching to a Running Process:-  
    1. strace -p process_id 
    
Statistics on Syscalls:-  
    1. strace -c exe-to-trace arguments 
    

/************* Brakpoints, Examining Registers and memory *************/
Breakpoint :-
1. Technique used to "Pause" the program during execution based on certain criteria. 
2. Criteria can be "about to execute an instruction" (which you want to examine). 
3. Debugger allows you to inspect/ modify CPU Regiters,Memory, Data etc. 
 
Examine memory :- 
1. To examine memory the commnad is x, to get more info CMD: help x. 
2. To get the adress of argv[1] use CMD:- print argv[1]
                                    o/p:- $2 = 0xbffff7e5 "value-passed through cmdline arg"
3. x/formate 
       The formate consist of 3 things,
        1. repeat count :-  the no of such items that you want to examine that beginning with the adress.
        2. format letter:-  how do you want go ahed and display all of this (Ex: oct,hex,string)
        3. size letter  
4. eip is pointing to the instruction that will execute next .(CMD: info registers)
5. To disassemble the specific function CMD:-(gdb) disassemble <function-name>   

Steps :- 
          1.  gcc file_name.c -ggdb -o file_exe_debug 
          2.  gdb ./file_exe_debug 
                    To execute the code with gdb 
          3.  run [arglist]
                   Start your program (with arglist, if specified). 
          4.  break [file:]function
                   Set a breakpoint at function (in file). 
          5.  info registers
                   Displays the contents of general-purpose processor registers.
          6.  info breakpoints 
                   Gives the list of break points set in the gdb. 
          7.  disable <breakpoint No>  
                   To disable the particular breakpoint. 
          8.  enable <breakpoint No>
                   To enable the particular breakpoint. 
          9.  delete <breakpoint No>
                   To delete the particular breakpoint. 
         10.  x/<no>i <instruction address output from disassemble cmd>
                   To disassemble <no> of machine instructions starting from the 
                   Adress given as an input.  (Ex:- (gdb) x/1xw $esp) 
                    
/************* Modifying Registes and Memory **********************/
To change the value which present at the memory adress x , we can use 
                  cmd   type    Adress-get-from print     value
      Ex:-  (gdb) set   {char}  <x-addr>0xbffff7e6     =   'B' 

To change the value present in cpu registers, use
        -- info registers        -> To check the values present in cpu registers.
        -- set $eax = <value> 
        -- set $eip = <next instruction adress need to exe> 

/************* convenience Variables and calling Routines ********/ 
Convenience Variables:- 
    1. You can create variables in GDB to hold data. 
        Ex:-  set $i = 10; 
              set $dyn = (char *)malloc(15);
              $demo = "Harsha vardhan"
              set argv[1] = $demo 
    
    2. You can use all the c library functions in gdb also while code is running, 
          Ex:- to copy string "harsha" to the memory $dyn we can use below cmd 
                CMD:-  call strcpy($dyn, "harsha")   
    
    3. You can use "call" function to call any function which is present in the 
       executable or in libraries. 
                CMD:- call function_name(arguments....)

/************* Cracking a Simple Binary with DEBUG Symbols **************/ 


