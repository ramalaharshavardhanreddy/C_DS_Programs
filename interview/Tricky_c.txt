/******************** C multiple increment operators inside printf *****/
i++ =  At the time of execution we will be using older value of i = 1
++i =  At the time of execution we will be increment value already modified 
       after step 1 i.e i = 3.
i   =  At the time of execution we will be using value of i modified in step.
#include<stdio.h>
void main() {
       int i = 1;
       printf("%d %d %d", i, ++i, i++); 
}
o/p :- 3 3 1 
/******************* Static variable ************/ 
1. A static int variable remains in memory while the program is running. 
2. Static variables are allocated memory in data segment, not stack segment.
3. Static variables (like global variables) are initialized as 0 if not 
   initialized explicitly.
4. In C, static variables can only be initialized using constant literals.
5. static variables get created even before the main function or any function 
   is called.

Q1:-
#include<stdio.h> 
int fun() 
{
    static int count = 0; 
    count++; 
    return count; 
}
int main() 
{ 
  printf("%d ", fun()); 
  printf("%d ", fun()); 
  return 0; 
}  
OP:- 1 2 

Q2:- 
#include <stdio.h> 
int main() 
{ 
    static int x; 
    int y; 
    printf("%d \n %d", x, y); 
}
OP:- 
    0
    some Garbage value 

Q3:- 
#include<stdio.h> 
int initializer(void) 
{ 
    return 50; 
}
int main() 
{ 
    static int i = initializer(); 
    printf(" value of i = %d", i); 
    getchar(); 
    return 0; 
} 
OP:- 
    Error : initializer element is not constant 

Q4:- 
 --- if you have a static int in a header file and include it from two separate 
     .c files, you will have two discrete copies of that int, which is most likely 
     not at all what you want.

/**** q7a.h ***/
static int err_code = 3;
void printErrCode(void);

/*** q7a.c ***/
#include <stdio.h>
#include "q7a.h"
void printErrCode(void)
{
   printf ("%d\n", err_code);   // OP:- 3 
}

/***q7main.c:***/
#include "q7a.h"
err_code =5;  /*** Error:- data definition has no type or storage class */  
int main(void)
{
  err_code = 5;
  printErrCode();
  return 0;
}

Static Functions:-
    1. Unlike global functions in C, access to static functions is restricted to 
       the file where they are declared.
    2. static can be reuse of the same function name in other files.
Q1:-

/* Inside file1.c */ 
static void fun1(void) 
{ 
      puts("fun1 called"); 
}
/* Iinside file2.c  */ 
int main(void) 
{ 
      fun1();  
        getchar(); 
          return 0;   
}
OP:-
    Error:- Undefined reference to `fun1'.   

Default vales of static variable:- 
    1. if it has pointer type, it is initialized to a NULL pointer.
    2. if it has arithmetic type, it is initialized to (positive or unsigned) 
       zero.
       
Q1:- 

#include<stdio.h> 
int g;  //g = 0, global objects have static storage duration 
static int gs; //gs = 0, global static objects have static storage duration 
int main() 
{ 
      static int s; //s = 0, static objects have static storage duration 
      printf("Value of g = %d", g); 
      printf("\nValue of gs = %d", gs); 
      printf("\nValue of s = %d", s); 
      getchar(); 
      return 0; 
} 
OP:- Value of g = 0
     Value of sg = 0
     Value of s = 0

/******************** Extern Keyword *********/ 
1. extern keyword extends the visibility of the C variables and C functions.
2. By default, the declaration and definition of a C function have “extern” 
   prepended with them. 
3. extern int var; 
    - Here, an integer type variable called var has been declared (remember no 
    definition i.e. no memory allocation for var so far). 
    - declaration can be done any number of times.

Q1:- 

Q1.1:-

int var; /* var is defined (and declared implicitly) globally.*/
int main(void) 
{ 
  var = 10; 
  return 0; 
} 

Q1.2:-

extern int var; /* Here var is declared only. Notice var is never used so no problems arise. */
int main(void) 
{ 
      return 0; 
} 

Q1.3:- 

extern int var; 
int main(void) 
{ 
      var = 10;   /* error: var is declared but not defined anywhere. */ 
      return 0; 
} 

Q1.4:- 

#include "somefile.h" /* if somefile.h has the definition of var, Then it compile otherwise through Error */ 
extern int var; 
int main(void) 
{ 
     var = 10; 
      return 0; 
} 

Q1.5:-
- if a variable is only declared and an initializer is also provided with that declaration,
  then the memory for that variable will be allocated i.e: the variable will be considered as defined.

extern int var = 0; /* Both declaration and defination */ 
int main(void) 
{ 
    var = 10; 
    return 0; 
} 

Q1.6:-
int main(int argc,char* argv[])                                                 
{
    extern int i=0;  /* Error: _i_ has both _extern_ and initializer */                                                              
}

Q1.7:- 
int main()
{
    extern int i;
    int i=0;      /* Multiple declarations of i */  
}

Q1.8:- 

extern int i; 
int i=0;
i=25;            /* Compilation Error could not assign Globally  */ 
int main()
{
    printf("\n %d\n",i);
}

/***** register keyword in c *************************/ 
1. Registers are faster than memory to access.
2. The keyword register hints to compiler that a given variable can be put in 
    a register.
3. It’s compiler’s choice to put it in a register or not. 
4. If you use & operator with a register variable then compiler may give an error 
   or warning. 
5. accessing address of a register is invalid.
6. There is no limit on number of register variables in a C program, but the point 
   is compiler may put some variables in register and some not.

Q1:-

int main() 
{ 
  register int i = 10; 
  int *a = &i; 
  printf("%d", *a);    /* Error: address of register variable _a_ requested */ 
  getchar(); 
  return 0; 
} 

Q1.1:-

int main() 
{ 
      int i = 10; 
      register int *a = &i; /*i register keyword can be used with pointer variables. */ 
      printf("%d", *a); 
      getchar(); 
      return 0; 
} 

Q1.2:- 

int main() 
{ 
  int i = 10; 
  register static int *a = &i;  /* C doesn’t allow multiple storage class specifiers for a variable. */ 
  printf("%d", *a); 
  getchar(); 
  return 0; 
} 

/**** volatile” qualifier in C  ********/ 
1. volatile instruct Compiler that this is special variable so that no compiler optimization are allowed 
   on this variable. Ex:-  volatile uint32 status = 0; 
2. But in general, volatile is used with pointers such as Ex:- volatile uint32 * statusPtr = 0xF1230000 
3. An object that has volatile-qualified type may be modified in ways unknown to the implementation or 
   have other unknown side effects.
4. A volatile declaration may be used to describe an object corresponding to a memory-mapped input/output port 
   or an object accessed by an asynchronously interrupting function. Actions on objects so declared shall not 
   be optimized out by an implementation or reordered except as permitted by the rules for evaluating expressions.
5. The system always reads the current value of a volatile object from the memory location rather than keeping its 
   value in temporary register at the point it is requested, even if a previous instruction asked for a value from 
   the same object.

Areas of volatile keyword usage:- 
    1. Global variables modified by an interrupt service routine outside the scope.
    2. Global variables within a multi-threaded application.
   
Q1:- 


/* Compile code without optimization option */
#include <stdio.h> 
int main(void) 
{ 
        const int local = 10; 
        int *ptr = (int*) &local; 
        printf("Initial value of local : %d \n", local); 
        *ptr = 100; 
        printf("Modified value of local: %d \n", local); 
        return 0; 
} 

compile :- 
    1. with  out optimization sizeof .s file is size large. 
            gcc volatile.c -o volatile -save-temps (generate .s,.i,.o files)
    2. with optimization sizeof .s file is small.
            gcc -O3 volatile.c -o volatile -save-temps 

#include <stdio.h> 
int main(void) 
{ 
        const volatile int local = 10; 
        int *ptr = (int*) &local; 
        printf("Initial value of local : %d \n", local); 
        *ptr = 100; 
        printf("Modified value of local: %d \n", local); 
        return 0; 
} 

compile :- 
    1. with optimization sizeof .s file is large compared to previous, because 
       local variable is not optimized.
            gcc -O3 volatile.c -o volatile -save-temps 

/*********** restrict keyword in C *******/ 
1. restrict keyword is mainly used in pointer declarations as a type qualifier for pointers.
2. It doesn’t add any new functionality. It is only a way for programmer to inform about an 
   optimizations that compiler can make. 
3. When we use restrict with a pointer ptr, it tells the compiler that ptr is the only way to 
   access the object pointed by it and compiler doesn’t need to add any additional checks. 
4. If a programmer uses restrict keyword and volatile the above condition, result is undefined behavior. 

Q1:- 


/* C program to use restrict keyword. */ 
#include <stdio.h> 
 
/* Note that the purpose of restrict is to 
   show only syntax. It doesn't change anything 
   in output (or logic). It is just a way for 
   programmer to tell compiler about an  
   optimization  */ 
void use(int* a, int* b, int* restrict c) 
{ 
  *a += *c; 
  /* Since c is restrict, compiler will 
     not reload value at address c in 
     its assembly code. Therefore generated 
     assembly code is optimized */
  *b += *c;   
} 

int main(void) 
{ 
   int a = 50, b = 60, c = 70; 
   use(&a, &b, &c); 
   printf("%d %d %d", a, b, c); 
   return 0; 
} 

OP:- 120 130 70 

/********* _Generic keyword in C ******/ 
1. a macro can operate on different types of variables(like char, int ,double,..) without type checking.
    
    #define INC(P) ++P where P = "Harsha" or P = varable, no type checking.  
2. By using _Generic_, We can define MACRO for the different types of data types.
3. macro INC(x) translates to INCl(x), INC(x) or INCf(x) depending on the type of x: 
    
    #define INC(x) _Generic((x), long double: INCl, \
                                 default: INC, \
                                 float: INCf)(x)


 



