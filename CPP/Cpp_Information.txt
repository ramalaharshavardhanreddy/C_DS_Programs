Name Spaces :-  
  -  Namespaces were introduced into C++ to resolve identifier name conflicts.
  -  This ensured that two objects can have the same name and yet be treated differently if they belonged to different namespaces. 
  
 Imp Points :- 
  -  it is never a good idea to use “void main()” or just “main()” as it doesn’t confirm standards. It may be allowed by some compilers        though.

C++ Data Types :-  
  - we can say that data types are used to tell the variables the type of data it can store.
  1.  Primitive Data Types :- 
        - Integer               :  int       : 4 Bytes        : -2147483648 to 2147483647 
        - Character             :  char      : 1 Byte         : -128 to 127 or 0 to 255
        - Boolean               :  bool      : 1 Byte              : true or false 
        - Floating Point        :  float     : 4 Bytes        : 
        - Double Floating Point :  double    : 8 Bytes        : 
        - Valueless or Void     :  void      :                : 
        - Wide Character        :  wchar_t  : 2 or 4 Bytes    : 
 
 2. Abstract or user defined data type :- 
        These data types are defined by user itself. Like, defining a class in C++ or a structure.
        
 - Datatype Modifiers :-  
      - As the name implies, datatype modifiers are used with the built-in data types to modify the length of data that a particular
        data type can hold. 
      - Data type modifiers available in C++ are:
            - Signed
            - Unsigned
            - Short
            - Long
       
 IMP :-  
    -  We have long long int :  8 Bytes  
    -  we have long double   :  12 Bytes   
    
 Basic Input / Output in C++ :- 
  - Input Stream :-  
        If the direction of flow of bytes is from device(for example: Keyboard) to the main memory then this process is
        called input.
  - Output Stream :-  
        If the direction of flow of bytes is opposite, i.e. from main memory to device( display screen ) then this process is called     
        output.
        
Header files available in C++ for Input – Output operation are :- 
  - iostream  
  - iomanip 
  - fstream 
  
 - Standard output stream (cout) :- 
    - The data needed to be displayed on the screen is inserted in the standard output stream (cout) using the insertion operator (<<).
        Ex:- 
            char sample[] = "GeeksforGeeks"; 
            cout << sample << " - A computer science portal for geeks";
   
 - standard input stream (cin) :-
    - The extraction operator(>>) is used along with the object cin for reading inputs.
        Ex:-  
             int age;  
             cin >> age;  
             
 - Un-buffered standard error stream (cerr) :- 
    - As cerr is un-buffered so it is used when we need to display the error message immediately. It does not have any buffer to store
      the error message and display later.
          Ex:- 
                cerr << "An error occured"; 
                
 - buffered standard error stream (clog) :- 
    - unlike cerr the error is first inserted into a buffer and is stored in the buffer until it is not fully filled. The error message
      will be displayed on the screen too. 
           Ex:- 
                clog << "An error occured";  

C/C++ Preprocessors :- 
  -  Preprocessor programs provides preprocessors directives which tell the compiler to preprocess the source code before compiling. 
  -  All of these preprocessor directive begins with a ‘#’ (hash) symbol. 
  
  There are 4 main types of preprocessor directives :- 
    - Macros :- 
        - Macros are piece of code in a program which is given some name. Whenever this name is encountered by the compiler the compiler
          replaces the name with the actual piece of code. The ‘#define’ directive is used to define a macro.
        - There is no semi-colon(‘;’) at the end of macro definition. Macro definitions do not need a semi-colon to end.
        
    - File Inclusion :- 
        - This type of preprocessor directive tells the compiler to include a file in the source code program. 
        - There are two types of files which can be included by the user in the program :- 
              - Header File or Standard files :- 
                    #include< file_name > 
              - user defined files :- 
                    #include"filename" 
                    
    - Conditional Compilation :- 
        -  which helps to compile a specific portion of the program or to skip compilation of some specific part of the program based 
            on some conditions.  
            Syntax :- 
                      #ifdef macro_name
                          statement1;
                          statement2;
                          statement3;
                          .
                          .
                          .
                          statementN;
                      #endif
                      
    - Other directives :- 
        1.  #undef Directive :- 
            - The #undef directive is used to undefine an existing macro.   
                    Ex:- #undef Macro_Name 
                    
        2.  #pragma Directive :-   
            - it is used to turn on or off some features. 
            - This type of directives are compiler-specific. 
            - #pragma startup and #pragma exit: 
                - These directives helps us to specify the functions that are needed to run before program startup( before the control
                  passes to main()) and just before program exit (just before the control returns from main()).
                  
                  Ex:-   1.  void __attribute__((constructor)) func_name();  calls before  main() call  
                         2.  void __attribute__((destructor)) func_name();   calls  before main() return. 
                         
            #pragma warn Directive :- 
                - This directive is used to hide the warning message which are displayed during compilation.
                     1. #pragma warn -rvl :-  raised when a function which is supposed to return a value does not returns a value.
                     2. #pragma warn -par :-  raised when a function does not uses the parameters passed to it.
                     3. #pragma warn -rch :-   raised when a code is unreachable like  code after return in function.  
            
Operators in C/C++ :- 
    1.  Arithmetic Operators :- 
            These are the operators used to perform arithmetic/mathematical operations on operands. 
             a.  Unary Operators            :-    ++ , -- 
             b.  Binary Operators           :-    + , - , * , / 
    2.  Relational Operators       :-    ==, >= , <= 
    3.  Logical Operators          :-    && , || , ! 
    4.  Bitwise Operators          :-    & , | , << , >> , ~ , ^ 
    5.  Assignment Operators       :-    = , += , -= , *= , %= , /=
    6.  Other Operators :- 
            a.  sizeof operator 
            b.  Comma Operator 
            c.  Conditional Operator  :- Expression1 ? Expression2 : Expression3
            
Decision Making in C / C++ :- 
    - if statement
            Syntax :- 
                  if(condition) 
                  {
                    // Statements to execute if
                   // condition is true
                  }
    - if..else statements
            Syntax :-  
                  if (condition)
                  {
                      // Executes this block if
                      // condition is true
                  }
                  else
                  {
                      // Executes this block if
                      // condition is false
                  }     
    - nested if statements
            Syntax :-
                  if (condition1) 
                  {
                      // Executes when condition1 is true
                      if (condition2) 
                      {
                          // Executes when condition2 is true
                      }
                  }
                  
    - if-else-if ladder
            Syntax :-  
                  if (condition)
                      statement;
                  else if (condition)
                       statement;
                       .
                       .
                  else
                      statement;
    - switch statements
            Syntax :- 
                  switch (Exp (or) constant)     Valid Exp :-  switch(1+2+23) , switch(1*2+3%4) Invalid :- switch(ab+cd) , switch(a+b+c)
                  {
                        case constant1: // code to be executed if n = 1;
                            break;
                        case constant2: // code to be executed if n = 2;
                             break;
                             .
                             .
                             .
                        default: // code to be executed if n doesn't match any cases
                  }
    
 compile 32-bit program on 64-bit gcc :-  
    -  gcc -v  gives  current gcc version ib PC. 
     - gcc -m32 file_name.c -o file_name    to compile with 32-bit gcc. 
        IMP :- if you get any error then install below packages 
                  For C language:
                      sudo apt-get install gcc-multilib
                  For C++ language:
                      sudo apt-get install g++-multilib
     - size_t = size 8  for 64 bit 
              = size 4  for 32 bit  
              
              
What is vector in C++ :-  
  Vector in C++ is a class in STL that represents an array. The advantages of vector over normal arrays are, 
      - We do not need pass size as an extra parameter when we pass vector.
      - Vectors have many in-built function like, erasing an element, etc.
      - Vectors support dynamic sizes, we do not have to initially specify size of a vector. We can also resize a vector. 
                      
              
References in C++ :-  
  - When a variable is declared as reference, it becomes an alternative name for an existing variable. 
    A variable can be declared as reference by putting ‘&’ in the declaration.
  - A pointer can be declared as void but a reference can never be void 
            int a = 10;
            void* aa = &a;. //it is valid
            void &ar = a; // it is not valid 
            
  1) Once a reference is created, it cannot be later made to reference another object; it cannot be reseated. 
     This is often done with pointers.
  2) References cannot be NULL. Pointers are often made NULL to indicate that they are not pointing to any valid thing.
  3) A reference must be initialized when declared. There is no such restriction with pointers
        - Due to the above limitations, references in C++ cannot be used for implementing data structures like Linked List, Tree, etc.             In Java, references don’t have above restrictions, and can be used to implement all data structures. References being more               powerful in Java, is the main reason Java doesn’t need pointers.

References are safer and easier to use :-
  1) Safer:-  Since references must be initialized, wild references like wild pointers are unlikely to exist. It is still possible to
     have references that don’t refer to a valid location. 
 2) Easier to use :-  References don’t need dereferencing operator to access the value. They can be used like normal variables. ‘&’ 
     operator is needed only at the time of declaration. Also, members of an object reference can be accessed with dot operator (‘.’),
     unlike pointers where arrow operator (->) is needed to access members.

 - Together with the above reasons, there are few places like copy constructor argument where pointer cannot be used. Reference must be
    used pass the argument in copy constructor. Similarly references must be used for overloading some operators like ++.
    
Difference in Reference variable and pointer variable :- 
     -  A pointer can be re-assigned while reference cannot, and must be assigned at initialization only.
     -  Pointer can be assigned NULL directly, whereas reference cannot.
     -  Pointers can iterate over an array, we can use ++ to go to the next item that a pointer is pointing to.
     -  A pointer is a variable that holds a memory address. A reference has the same memory address as the item it references.
     -  A pointer to a class/struct uses ‘->'(arrow operator) to access it’s members whereas a reference uses a ‘.'(dot operator)
     -  A pointer needs to be dereferenced with * to access the memory location it points to, whereas a reference can be used directly.
    
   Reference to Pointer :-
            int g_n=10; 
            int main(void)
            {
                int n = 23;
                int* pn = &n
                func_ref_to_ptr(pn);    // caller
            }
            void func_ref_to_ptr(int*& pp)  // We can modify pp in this funtion but func_ref_to_ptr(int* pp) we can not modify PP in fum
            {
              pp = &g_n;
            }
            
 Some invalid  Reference examples :- 
    1.  Reference to value at uninitialized pointer :-  
             int *ptr; 
             int &ref = *ptr;  // Reference to value at some random memory location
             
    2.  Reference to a local variable is returned :- 
          - Once fun() returns, the space allocated to it on stack frame will be taken back. So the reference to a local variable will
              not be valid. 
              
             int& fun() 
             { 
                int a = 10; 
                return a; 
              }  


Basic Concepts of Object Oriented Programming using C++ :- 
  - The main aim of OOP is to bind together the data and the functions that operates on them so that no other part of code can 
     access this data except that function.
   
   1) Object :- 
        - Objects are basic run-time entities in an object oriented system, objects are instances of a class these are defined user
          defined data types.
          
   2) Class :- 
        - Class is a blueprint of data and functions or methods. Class does not take any space. 
              Syntax for class :- 
                    class class_name 
                    { 
                        private: 
                                  //data members and member functions declarations 
                        public: 
                                 //data members and member functions declarations 
                        protected: 
                                 //data members and member functions declarations 
                    };
                    
            IMP :-  By default class variables are private.  
            
 Encapsulation and Data abstraction :- 
    - Wrapping up(combing) of data and functions into a single unit is known as encapsulation. 
    - The data is not accessible to the outside world and only those functions which are wrapping in the class can access it. 
    - Data abstraction refers to, providing only needed information to the outside world and hiding implementation details. 
    
 Inheritance :- 
    - inheritance is the process by which objects of one class acquire the properties of objects of another class. It supports the
       concept of hierarchical classification. Inheritance provides re usability.
    
 Polymorphism :- 
    - polymorphism means ability to take more than one form. An operation may exhibit different behaviors in different instances. The
      behavior depends upon the types of data used in the operation. 
    - C++ supports operator overloading and function overloading.  
         - The process of making an operator to exhibit different behaviors in different instances is known as operator overloading.  
         - Function overloading is using a single function name to perform different types of tasks. 
         
Dynamic Binding :- 
    - In dynamic binding, the code to be executed in response to function call is decided at runtime. C++ has virtual functions to
      support this. 
      
Message Passing :- 
    - Objects communicate with one another by sending and receiving information to each other. A message for an object is a request for
      execution of a procedure and therefore will invoke a function in the receiving object that generates the desired results. 
      Message passing involves specifying the name of the object, the name of the function and the information to be sent.
      
Name Mangling and extern “C” in C++ :- 
  -  C++ supports function overloading, i.e., there can be more than one functions with same name and differences in parameters.
  - it changes names by adding information about arguments. This technique of adding additional information to function names is called 
     Name Mangling.
        Ex :-  
              int  f (void) { return 1; } 
              c++ compiler manages  like   " int  __f_v (void) { return 1; } "  
              
How to handle C symbols when linking from C++ :- 
  - When some code is put in extern “C” block, the C++ compiler ensures that the function names are unmangled – that the compiler emits
     a binary file with their names unchanged, as a C compiler would do.
  
  -  all C style header files (stdio.h, string.h, .. etc) have their declarations in extern “C” block.
              #ifdef __cplusplus  
                extern "C" { 
              #endif 
              /* Declarations of this file */
               #ifdef __cplusplus 
                 } 
              #endif 
              
 Difference between C structures and C++ structures :- 
    Some important differences between the C and C++ structures :- 
          1. Member functions inside structure :- 
              - Structures in C cannot have member functions inside structure but Structures in C++ can have member functions along with
                data members.
          
          2. Direct Initialization :- 
              -  We cannot directly initialize structure data members in C but we can do it in C++.
              
          3. Using struct keyword :-  
              - In C, we need to use struct to declare a struct variable. In C++, struct is not necessary. For example, let there be a
                structure for Record. In C, we must use “struct Record” for Record variables. In C++, we need not use struct and using
                ‘Record‘ only would work.
          
          4. Static Members :-
              - C structures cannot have static members but is allowed in C++.
              
          5. Constructor creation in structure :-  
              - Structures in C cannot have constructor inside structure but Structures in C++ can have Constructor creation.
              
          6. sizeof operator :- 
              - This operator will generate 0 for an empty structure in C whereas 1 for an empty structure in C++.
              
           7 Data Hiding :- 
              - C structures do not allow concept of Data hiding but is permitted in C++ as C++ is an object oriented language whereas C
                  is not.

           8 Access Modifiers :-  
              - C structures do not have access modifiers as these modifiers are not supported by the language. C++ structures can have
                  this concept as it is inbuilt in the language.
              
              
              
***************************************************************************************************************************************
                                          Pointers and References 
***************************************************************************************************************************************

What is Array Decay :-  
    - The loss of type and dimensions of an array is known as decay of an array. 
    - This generally occurs when we pass the array into function by value or pointer. What it does is, it sends first address to the 
      array which is a pointer, hence the size of array is not the original one, but the one occupied by the pointer in the memory.
      
 How to prevent Array Decay :- 
    - A typical solution to handle decay is to pass size of array also as a parameter and not use sizeof on array parameters. 
    - Another way to prevent array decay is to send the array into functions by reference. This prevents conversion of array into a
      pointer, hence prevents the decay.
 

What is an opaque pointer :-  
    -   Opaque pointer is a pointer which points to a data structure whose contents are not exposed at the time of its definition. 
                Ex :-  struct STest* pSTest;  
                
When do we pass arguments by reference or pointer :- 
    1.  To modify local variables of the caller function  
    2.  For passing large sized arguments  
    3.  To avoid Object Slicing :-   
            -  If we pass an object of subclass to a function that expects an object of superclass then the passed object is sliced if 
                it is pass by value.  
    4.  To achieve Run Time Polymorphism in a function. 
    
 Use of explicit keyword :- 
    - It avoids  implicit call to the constructor.  
    
‘this’ pointer in C++ :- 
    - Meaning each object gets its own copy of data members and all objects share single copy of member functions.
    - Compiler supplies an implicit pointer along with the functions names as ‘this’.
    - The ‘this’ pointer is passed as a hidden argument to all nonstatic member function calls and is available as a local variable
      within the body of all nonstatic functions. 
    - ‘this’ pointer is a constant pointer that holds the memory address of the current object. ‘this’ pointer is not available in 
       static member functions as static member functions can be called without any object (with class name).
    
  Following are the situations where ‘this’ pointer is used :- 
      1.  When local variable’s name is same as member’s name 
      2.  To return reference to the calling object  

delete this” in C++ :-   
    - delete operator works only for objects allocated using operator new .  
    - Once delete this is done, any member of the deleted object should not be accessed after deletion.
    
  
auto_ptr, unique_ptr, shared_ptr and weak_ptr :-  
    1. auto_ptr :- 
          - auto_ptr is a smart pointer that manages an object obtained via new expression and deletes that object when auto_ptr itself
             is destroyed. 
          - An object when described using auto_ptr class it stores a pointer to a single allocated object which ensures that when it 
            goes out of scope, the object it points to must get automatically destroyed. 
          - The copy constructor and the assignment operator of auto_ptr do not actually copy the stored pointer instead they transfer
             it, leaving the first auto_ptr object empty. 
          - This was one way to implement strict ownership, so that only one auto_ptr object can own the pointer at any given time 
             i.e. auto_ptr should not be used where copy semantics are needed.
             
    2. unique_ptr :- 
          - It is a container for raw pointers. It explicitly prevents copying of its contained pointer as would happen with normal 
             assignment i.e. it allows exactly one owner of the underlying pointer.
          - when using unique_ptr there can only be at most one unique_ptr at any one resource and when that unique_ptr is destroyed,
            the resource is automatically claimed. 
          - any attempt to make a copy of unique_ptr will cause a compile time error.  
                      
                      unique_ptr<A> ptr1 (new A);
                      // Error: can't copy unique_ptr
                      unique_ptr<A> ptr2 = ptr1;  
          
          - But, unique_ptr can be moved using the new move semantics i.e. using std::move() function to transfer ownership of the 
            contained pointer to another unique_ptr.
            
                    // Works, resource now stored in ptr2
                       unique_ptr<A> ptr2 = move(ptr1); 
         
         When to use unique_ptr? :- 
            - Use unique_ptr when you want to have single ownership(Exclusive) of resource. Only one unique_ptr can point to one
               resource. Since there can be one unique_ptr for single resource its not possible to copy one unique_ptr to another. 
            
  
    3. shared_ptr :- 
        -  It is a reference counting ownership model i.e. it maintains the reference count of its contained pointer in cooperation with
            all copies of the shared_ptr. 
       
       Reference Counting :-  
         - It is a technique of storing the number of references, pointers or handles to a resource such as an object, block of memory,
            disk space or other resources.
         - An object referenced by the contained raw pointer will not be destroyed until reference count is greater than zero i.e. until
           all copies of shared_ptr have been deleted.
         - So, we should use shared_ptr when we want to assign one raw pointer to multiple owners.
         
   4. weak_ptr :-  
       - A weak_ptr is created as a copy of shared_ptr. It provides access to an object that is owned by one or more shared_ptr 
         instances, but does not participate in reference counting.
      When to use weak_ptr? :- 
       -  When you do want to refer to your object from multiple places – for those references for which it’s ok to ignore and
          deallocate (so they’ll just note the object is gone when you try to dereference).
          
          IMP :- If compile time Error Use (g++ -std=c++0x -pedantic  file_name.cpp)
                  https://en.cppreference.com/book/intro/smart_pointers
          
 Dangling, Void , Null and Wild Pointers :-  
    
    1. Dangling Pointer :- 
        - A pointer pointing to a memory location that has been deleted (or freed) is called dangling pointer.  
         
        3 ways of causing Dangling Pointer :-   
            1.  De-allocation of memory
            2.  Function Call 
            3.  Variable goes out of scope
            
   2.  Void pointer :- 
        -  void * – a pointer that points to some data location in storage, which doesn’t have any specific type.  
        Important Points :- 
          - void pointers cannot be dereferenced. It can however be done using typecasting the void pointer.
          - Pointer arithmetic is not possible on pointers of void due to lack of concrete value and thus size.
          
   3. NULL Pointer :-  
        - NULL Pointer is a pointer which is pointing to nothing. In case, if we don’t have address to be assigned to a pointer, then we
          can simply use NULL.
          
        Important Points :- 
          - NULL vs Uninitialized pointer :- 
              - An uninitialized pointer stores an undefined value. A null pointer stores a defined value, but one that is defined by
                the environment to not be a valid address for any member or object.
          - NULL vs Void Pointer :– 
              - Null pointer is a value, while void pointer is a type. 
   
   4. Wild pointer :- 
        - A pointer which has not been initialized to anything (not even NULL) is known as wild pointer.

          
 ***************************************************************************************************************************************
                                          Dynamic memory allocation 
***************************************************************************************************************************************
      -  C++ supports these functions and also has two operators new and delete that perform the task of allocating and freeing the
          memory in a better and easier way.
          
      1) new :-
                syntax :- 
                            pointer-variable = new data-type;  
                            Ex :-  int *p = new int; 
        Initialize memory :- 
                syntax :- 
                            pointer-variable = new data-type(value); 
                            Ex :- 
                                  int *p = new int(25);  
       Allocate block of memory :- 
                syntax :- 
                          pointer-variable = new data-type[size];
                          Ex :- 
                                int *p = new int[10]  
         - If enough memory is not available in the heap to allocate, the new request indicates failure by throwing an exception of type
            std::bad_alloc. 
            
        2) delete operator  :- 
              - Since it is programmer’s responsibility to deallocate dynamically allocated memory. 
                  
                  // Release memory pointed by pointer-variable
                    delete pointer-variable;  
                    
                 // Release block of memory 
                 // pointed by pointer-variable
                    delete[] pointer-variable;  

            Example:
                       // It will free the entire array
                       // pointed by p.
                          delete[] p;
         
  std::get_temporary_buffer in C++ :-  
      - Get a block of temporary memory. In C++ STL library, there is a function get_temporary_buffer which is mostly used to get a 
         temporary block.
      - Once the the memory block which is assigned is not needed anymore it shall be released by calling return_temporary_buffer .
      
      
      - pair(int*, ptrdiff_t) p = get_temporary_buffer(int)(required size)
          parameters :
                  n : Number of elements of type T for which 
                  temporary memory is allocated.
                  ptrdiff_t  : it is an integral type.
          Return:
                      The function return the pair of objects first and second.
                      When memory is allocated the first contain the pointer to 
                      the first element in the block and the second contains the size .
                      if the memory block is not allocated then  in pair 
                      first contain null pointer and second 
                      contain zero
                      
***************************************************************************************************************************************
                                          Object Oriented Programming(OOP)
***************************************************************************************************************************************
            
                                        Machine Languages 
                                                | 
                                        Assembly Languages 
                                                |
                                        Structured Programming Language  
                                                | 
                                        Procedural Programming Language 
                                                | 
                                        Object Oriented Programming  
                                        
  What Are Class & Objt :-  
      -  It is an abstract and user-defined data type. The primary purpose of the class is to store data and information. 
      -  A class is the blueprint of the object, but also, we can say the implementation of the class is the object. 
      
 Encapsulation :- 
      - It describes the idea of wrapping data and the methods that work on data within one unit, e.g., a class 
      
Inheritance :- 
      - Inheritance is the ability of one class to inherit capabilities or properties of another class, called the parent class. 
        
        Types  :- 
            1.  Single Inheritance 
            2.  Multiple Inheritance  
            3.  Multilevel Inheritance
            4.  Hierarchical Inheritance 
            5.  hybrid class Inheritance  
            
 Polymorphism  :- 
    - Polymorphism is the ability for data to be processed in more than one form. 
      Types of Polymorphism :- 
          1. Compile Time
                a.  Function OverLoading 
                b.  Operator OverLoading 
          2. Runtime  
                a. Virtual  Functions  
                
Accessing data members and member functions :- 
    - The data members and member functions of class can be accessed using the dot(‘.’) operator with the object. 
    
    There are 2 ways to define a member function :- 
        1.  Inside class definition
        2.  Outside class definition
              - To define a member function outside the class definition we have to use the scope resolution :: operator along with 
                class name and function name.
  Note :- 
    - Note that all the member functions defined inside the class definition are by default inline, 
    - Declaring a friend function is a way to give private access to a non-member function.  
    
Constructors :- 
  - Constructors are special class members which are called by the compiler every time an object of that class is instantiated.  
  - Constructors have the same name as the class and may be defined inside or outside the class definition.

  There are 3 types of constructors :- 
                            1. Default constructors
                            2. Parametrized constructors
                            3. Copy constructors
 Destructors :- 
    - Destructor is another special member function that is called by the compiler when the scope of the object ends.  
    
                
                
                
                
                
                
      
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        

